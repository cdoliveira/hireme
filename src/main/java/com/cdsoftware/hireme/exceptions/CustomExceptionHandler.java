package com.cdsoftware.hireme.exceptions;

import io.jsonwebtoken.ExpiredJwtException;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.ValidationException;
import org.hibernate.PropertyValueException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.ErrorResponse;
import org.springframework.web.ErrorResponseException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;

@ControllerAdvice
public class CustomExceptionHandler {



    @ExceptionHandler(value = DataIntegrityViolationException.class)
    public ErrorResponseException handleSQLExceptions(Exception e){

        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Error Executing SQL");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = Exception.class)
    public ErrorResponseException handleExceptions(Exception e){



        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Error Generated by CustomExHandler");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = ExceptionInInitializerError.class)
    public ErrorResponseException handleInitExceptions(ExceptionInInitializerError e){



        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Error Generated by CustomExHandler");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = RuntimeException.class)
    public ErrorResponseException handleRuntimeExceptions(RuntimeException e){



        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Runtime Error Generated by CustomExHandler");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = PropertyValueException.class)
    public ErrorResponseException handlePropertieExceptions(Exception e){



        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Value cannot be null");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = ConstraintViolationException.class)
    public ErrorResponseException handleConstraintExceptions(RuntimeException e){



        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Constraint Validation Error");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }

    @ExceptionHandler(value = ExpiredJwtException.class)
    public ErrorResponseException handleExpiredToken(RuntimeException e){

        ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,e.getLocalizedMessage());
        pd.setTitle("Jwt Token is Expired");
        return new ErrorResponseException(HttpStatus.INTERNAL_SERVER_ERROR,pd,e);

    }


}
